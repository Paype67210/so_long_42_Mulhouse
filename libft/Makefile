NAME = libft.a
HEADERS = libft.h
DIR_OBJS = .objs/
CC = gcc -DM
FLAGS = -Wall -Wextra -Werror
AR = ar -rcs
RM = rm -rf

# Creation of sources
SRCES = ft_memset.c ft_bzero.c ft_memcpy.c ft_memmove.c ft_isalpha.c ft_isalnum.c \
		ft_isdigit.c ft_isascii.c ft_isprint.c ft_strlen.c ft_strlcpy.c ft_strlcat.c \
		ft_tolower.c ft_toupper.c ft_strchr.c ft_strrchr.c ft_strncmp.c ft_memchr.c \
		ft_memcmp.c ft_strnstr.c ft_atoi.c ft_calloc.c ft_strdup.c ft_substr.c \
		ft_strjoin.c ft_strtrim.c ft_split.c ft_itoa.c ft_strmapi.c ft_striteri.c \
		ft_putchar_fd.c ft_putstr_fd.c ft_putendl_fd.c ft_putnbr_fd.c \
		ft_lstnew.c ft_lstmap.c ft_lstadd_front.c ft_lstsize.c ft_lstadd_back.c \
		ft_lstdelone.c ft_lstclear.c ft_lstiter.c ft_lstlast.c get_next_line.c \
		ft_printf.c ft_printf_utils.c ft_print_ptr.c ft_print_unsigned.c ft_print_hex.c

# Generate a list of object files
LIST_OBJS = $(SRCES:.c=.o)
OBJS = $(addprefix $(DIR_OBJS), $(LIST_OBJS))

all: $(DIR_OBJS) $(OBJS) $(NAME)

# Use a pattern rule to compile source files to object files
$(DIR_OBJS)%.o: %.c
	@$(CC) $(FLAGS) -c $< -o $@ -I .

# Create the library
$(NAME): $(OBJS)
	@$(AR) $(NAME) $(OBJS)
	@ranlib $(NAME)
	@echo "Libft compiled!"

# Don't Relink
$(OBJS): $(HEADERS)

clean:
	@$(RM) $(DIR_OBJS)
	@echo "libft objects files cleaned!"

fclean:	clean
	@$(RM) $(NAME)
	@echo "libft executable files cleaned!"

re: fclean all
	@echo "Cleaned and rebuilt everything for libft!"

norm:
	@norminette $(SRCES) $(HEADERS) | grep -v Norme -B1 || true

$(DIR_OBJS):
	mkdir -p $(DIR_OBJS)

.PHONY : all norm clean fclean re
